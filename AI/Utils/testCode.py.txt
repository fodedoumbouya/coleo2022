import cv2 as cv
import numpy as np
# import json
# import sys
import json
import sys


def segmentation(argv, path):
    default_file = path
    # 'coleoi.jpg'
    filename = argv[0] if len(argv) > 0 else default_file
    src = cv.imread(cv.samples.findFile(filename), cv.IMREAD_COLOR)
    # Check if image is loaded fine
    if src is None:
        print('Error opening image!')
        print(
            'Usage: hough_circle.py [image_name -- default ' + default_file + '] \n')
        return -1

    gray = cv.cvtColor(src, cv.COLOR_BGR2GRAY)
    gray = cv.medianBlur(gray, 5)
    rows = gray.shape[0]
    circles = cv.HoughCircles(gray, cv.HOUGH_GRADIENT, 1, rows / 200,
                              param1=30, param2=30,
                              minRadius=1, maxRadius=30)
    mylist = []
    if circles is not None:
        circles = np.uint16(np.around(circles))
        for i in circles[0, :]:
            model = {
                "coord": {
                    "x": int(i[0]),
                    "y": int(i[1]),
                    "s": int(i[2])
                },
                "label": ""
            }
            mylist.append(model)

    # removing the extenstion i
    index = path.find('.')
    s = filename[:index], filename[index + 1:]
    p = s[0]+".json"
    # -creating the json
    with open(p, "w",) as mon_fichier:
        json.dump({path: mylist}, mon_fichier)

    return 0


def main(argv):

    default_file = 'coleoi.jpg'
    filename = argv[0] if len(argv) > 0 else default_file
    # Loads an image
    src = cv.imread(cv.samples.findFile(filename), cv.IMREAD_COLOR)
    # Check if image is loaded fine
    if src is None:
        print('Error opening image!')
        print(
            'Usage: hough_circle.py [image_name -- default ' + default_file + '] \n')
        return -1

    gray = cv.cvtColor(src, cv.COLOR_BGR2GRAY)

    gray = cv.medianBlur(gray, 5)

    rows = gray.shape[0]
    circles = cv.HoughCircles(gray, cv.HOUGH_GRADIENT, 1, rows / 200,
                              param1=30, param2=30,
                              minRadius=1, maxRadius=30)
    mylist = []

    #  param 1 param 2 est le min des trou
    if circles is not None:
        circles = np.uint16(np.around(circles))

        for i in circles[0, :]:
            center = (i[0], i[1])
            print("i: ", i)

            model = {
                "coord": {
                    "x": int(i[0]),
                    "y": int(i[1]),
                    "s": int(i[2])
                },
                "label": ""
            }
            mylist.append(model)

    with open("data.json", "w",) as mon_fichier:
        json.dump({"coleoi": mylist}, mon_fichier,
                  )

    print("mylist: ", mylist)
    # circle center
    #         cv.circle(src, center, 1, (0, 100, 100), 3)
    #         # circle outline
    #         radius = i[2]
    #         cv.circle(src, center, radius, (255, 0, 255), 3)

    # cv.imshow("detected circles", src)
    # cv.waitKey(0)

    return 0


if __name__ == "__main__":
    # main(sys.argv[1:])
    segmentation(sys.argv[1:], "coleoi.jpg")
